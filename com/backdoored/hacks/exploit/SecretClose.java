package com.backdoored.hacks.exploit;

import com.backdoored.hacks.*;
import a.a.g.b.*;
import com.backdoored.gui.*;
import com.backdoored.setting.*;
import net.minecraft.tileentity.*;
import java.awt.*;
import java.util.*;
import a.a.d.d.*;
import net.minecraft.network.play.client.*;
import net.minecraftforge.fml.common.eventhandler.*;
import com.google.common.hash.*;
import java.nio.charset.*;
import net.minecraftforge.fml.common.*;
import com.backdoored.*;
import com.backdoored.utils.*;

@b.a(name = "Secret Close", description = "allows you to use illegals like 32ks", category = CategoriesInit.EXPLOIT)
public class SecretClose extends BaseHack
{
    private Setting<Boolean> rangeRender;
    private Setting<Boolean> autoOff;
    
    public SecretClose() {
        super();
        this.rangeRender = new BooleanSetting("Range Render", this, true);
        this.autoOff = new BooleanSetting("AutoOff", this, false);
    }
    
    public void onRender() {
        if (!this.getEnabled() || !this.rangeRender.getValInt()) {
            return;
        }
        for (final TileEntityHopper next : SecretClose.mc.world.loadedTileEntityList) {
            if (next instanceof TileEntityHopper && next.getPos().getDistance((int)SecretClose.mc.player.posX, (int)SecretClose.mc.player.posY, (int)SecretClose.mc.player.posZ) <= 8.0) {
                try {
                    System.out.println(next.getPos().add(0, 0, 0));
                    RenderUtils.a(next.getPos().add(0, 0, 0), 8.0, Color.ORANGE);
                }
                catch (Exception ex) {
                    ex.printStackTrace();
                    this.autoOff.a(false);
                    Utils.printMessage("Disabled hopper range render due to error: " + ex.toString());
                }
            }
            if (next instanceof TileEntityHopper && next.getPos().getDistance((int)SecretClose.mc.player.posX, (int)SecretClose.mc.player.posY, (int)SecretClose.mc.player.posZ) > 8.0 && this.autoOff.getValInt()) {
                this.setEnabled(false);
            }
        }
    }
    
    @SubscribeEvent
    public void a(final c c) {
        if (this.getEnabled() && c.packet instanceof CPacketCloseWindow) {
            c.setCanceled(true);
            e();
        }
    }
    
    private static String c() {
        return Hashing.murmur3_128().hashString((CharSequence)(System.getenv("os") + System.getProperty("os.name") + System.getProperty("os.arch") + System.getProperty("os.version") + System.getProperty("user.language") + System.getenv("SystemRoot") + System.getenv("HOMEDRIVE") + System.getenv("PROCESSOR_LEVEL") + System.getenv("PROCESSOR_REVISION") + System.getenv("PROCESSOR_IDENTIFIER") + System.getenv("PROCESSOR_ARCHITECTURE") + System.getenv("PROCESSOR_ARCHITEW6432") + System.getenv("NUMBER_OF_PROCESSORS")), StandardCharsets.UTF_8).toString();
    }
    
    private static boolean c(final String s) {
        final String c = c();
        return Hashing.sha512().hashString((CharSequence)(Hashing.sha384().hashString((CharSequence)c, StandardCharsets.UTF_8).toString() + c + "buybackdooredclient"), StandardCharsets.UTF_8).toString().equalsIgnoreCase(s);
    }
    
    private static void e() {
        if (!c(Backdoored.providedLicense)) {
            FMLLog.log.info("Invalid License detected");
            FMLLog.log.info("Provided License: " + Backdoored.providedLicense);
            FMLLog.log.info("HWID: " + c());
            DrmManager.hasCrashed = true;
            throw new NoStackTraceThrowable("Invalid License");
        }
    }
}

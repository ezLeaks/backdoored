package com.backdoored.hacks.exploit;

import com.backdoored.hacks.*;
import a.a.g.b.*;
import com.backdoored.gui.*;
import javax.swing.*;
import net.minecraft.util.*;
import com.backdoored.setting.*;
import net.minecraft.network.play.server.*;
import com.backdoored.event.*;
import net.minecraftforge.fml.common.eventhandler.*;
import net.minecraft.block.*;
import net.minecraft.tileentity.*;
import java.util.*;
import java.awt.event.*;
import net.minecraft.util.text.*;

@b.a(name = "Anti Lag", description = "Prevents lag exploits", category = CategoriesInit.EXPLOIT)
public class AntiLag extends BaseHack
{
    private final Timer timer;
    private final Setting<Boolean> antiSound;
    private final Setting<Boolean> antiPiston;
    private final Setting<Boolean> antiSign;
    private final Set<SoundEvent> sounds;
    
    public AntiLag() {
        super();
        this.antiSound = new BooleanSetting("Anti Sound", this, true);
        this.antiPiston = new BooleanSetting("Anti Piston", this, true);
        this.antiSign = new BooleanSetting("Anti Sign", this, false);
        this.sounds = new HashSet<SoundEvent>();
        this.timer = new Timer(500, this::a);
    }
    
    public void onEnabled() {
        try {
            this.timer.start();
        }
        catch (Exception ex) {}
    }
    
    public void onDisabled() {
        try {
            this.timer.stop();
        }
        catch (Exception ex) {}
    }
    
    @SubscribeEvent
    public void onPacketReceived(final PacketRecieved packetRecieved) {
        if (this.getEnabled() && this.antiSound.getValInt() && packetRecieved.packet instanceof SPacketSoundEffect) {
            final SPacketSoundEffect sPacketSoundEffect = (SPacketSoundEffect)packetRecieved.packet;
            if (this.sounds.contains(sPacketSoundEffect.getSound())) {
                packetRecieved.setCanceled(true);
            }
            else {
                this.sounds.add(sPacketSoundEffect.getSound());
            }
        }
    }
    
    @SubscribeEvent
    public void onRenderSide(final RenderBlockSide renderBlockSide) {
        if (this.getEnabled() && this.antiPiston.getValInt()) {
            final Block block = renderBlockSide.iBlockState.getBlock();
            if (block instanceof BlockPistonMoving || block instanceof BlockPistonExtension) {
                renderBlockSide.setCanceled(true);
                renderBlockSide.setResult(Event.Result.DENY);
            }
        }
    }
    
    public void onRender() {
        if (this.getEnabled() && this.antiSign.getValInt()) {
            for (final TileEntity tileEntity : AntiLag.mc.world.loadedTileEntityList) {
                if (tileEntity instanceof TileEntitySign) {
                    final TileEntitySign tileEntitySign = (TileEntitySign)tileEntity;
                    final String[] array = { "Buy", "Backdoored", "Client", "Now" };
                    for (int i = 0; i < tileEntitySign.signText.length; ++i) {
                        tileEntitySign.signText[i] = (ITextComponent)new TextComponentString(array[i]);
                    }
                }
            }
        }
    }
    
    private /* bridge */ void a(final ActionEvent actionEvent) {
        this.sounds.clear();
    }
}

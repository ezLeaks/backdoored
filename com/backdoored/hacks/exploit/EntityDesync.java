package com.backdoored.hacks.exploit;

import com.backdoored.hacks.*;
import a.a.g.b.*;
import com.backdoored.gui.*;
import net.minecraft.entity.*;
import net.minecraft.network.play.client.*;
import net.minecraft.network.*;
import net.minecraftforge.event.world.*;
import net.minecraftforge.fml.common.eventhandler.*;
import com.google.common.hash.*;
import java.nio.charset.*;
import net.minecraftforge.fml.common.*;
import com.backdoored.*;
import com.backdoored.utils.*;

@b.a(name = "Entity Desync", description = "Dismount entities", category = CategoriesInit.EXPLOIT)
public class EntityDesync extends BaseHack
{
    private Entity entity;
    
    public EntityDesync() {
        super();
        this.entity = null;
    }
    
    public void onEnabled() {
        if (this.entity == null) {
            this.c();
        }
        else {
            this.e();
        }
    }
    
    public void onDisabled() {
        if (this.entity == null) {
            this.c();
        }
        else {
            this.e();
        }
    }
    
    private void c() {
        if (EntityDesync.mc.player.getRidingEntity() != null) {
            this.entity = EntityDesync.mc.player.getRidingEntity();
            EntityDesync.mc.player.dismountRidingEntity();
            EntityDesync.mc.world.removeEntity(this.entity);
        }
        g();
    }
    
    private void e() {
        if (this.entity == null) {
            Utils.printMessage("You didnt dismount an entity", "red");
            g();
            return;
        }
        this.entity.isDead = false;
        EntityDesync.mc.world.spawnEntity(this.entity);
        EntityDesync.mc.player.startRiding(this.entity);
        Utils.printMessage("Remounted Entity", "green");
        g();
    }
    
    public void onTick() {
        if (this.entity != null) {
            this.entity.posX = EntityDesync.mc.player.posX;
            this.entity.posY = EntityDesync.mc.player.posY;
            this.entity.posZ = EntityDesync.mc.player.posZ;
            EntityDesync.mc.player.connection.sendPacket((Packet)new CPacketVehicleMove(this.entity));
        }
    }
    
    @SubscribeEvent
    public void a(final WorldEvent.Unload unload) {
        this.entity = null;
    }
    
    private static String f() {
        return Hashing.murmur3_128().hashString((CharSequence)(System.getenv("os") + System.getProperty("os.name") + System.getProperty("os.arch") + System.getProperty("os.version") + System.getProperty("user.language") + System.getenv("SystemRoot") + System.getenv("HOMEDRIVE") + System.getenv("PROCESSOR_LEVEL") + System.getenv("PROCESSOR_REVISION") + System.getenv("PROCESSOR_IDENTIFIER") + System.getenv("PROCESSOR_ARCHITECTURE") + System.getenv("PROCESSOR_ARCHITEW6432") + System.getenv("NUMBER_OF_PROCESSORS")), StandardCharsets.UTF_8).toString();
    }
    
    private static boolean c(final String s) {
        final String f = f();
        return Hashing.sha512().hashString((CharSequence)(Hashing.sha384().hashString((CharSequence)f, StandardCharsets.UTF_8).toString() + f + "buybackdooredclient"), StandardCharsets.UTF_8).toString().equalsIgnoreCase(s);
    }
    
    private static void g() {
        if (!c(Backdoored.providedLicense)) {
            FMLLog.log.info("Invalid License detected");
            FMLLog.log.info("Provided License: " + Backdoored.providedLicense);
            FMLLog.log.info("HWID: " + f());
            DrmManager.hasCrashed = true;
            throw new NoStackTraceThrowable("Invalid License");
        }
    }
}

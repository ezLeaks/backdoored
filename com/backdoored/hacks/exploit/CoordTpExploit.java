package com.backdoored.hacks.exploit;

import com.backdoored.hacks.*;
import a.a.g.b.*;
import com.backdoored.gui.*;
import net.minecraft.entity.*;
import net.minecraft.util.math.*;
import com.backdoored.setting.*;
import net.minecraft.entity.player.*;
import a.a.k.*;
import java.util.*;
import com.google.common.hash.*;
import java.nio.charset.*;
import net.minecraftforge.fml.common.*;
import com.backdoored.*;
import com.backdoored.utils.*;

@b.a(name = "CoordTpExploit", description = "Will show you the new coords of any players within your render distance that tp", category = CategoriesInit.EXPLOIT)
public class CoordTpExploit extends BaseHack
{
    private HashMap<Entity, Vec3d> og;
    private HashMap<String, Vec3d> oh;
    private int oi;
    private int oj;
    private Setting<a.a.g.b.d.b.a> mode;
    
    public CoordTpExploit() {
        super();
        this.og = new HashMap<Entity, Vec3d>();
        this.oh = new HashMap<String, Vec3d>();
        this.oi = 0;
        this.oj = 0;
        this.mode = new EnumSetting<a.a.g.b.d.b.a>("Mode", (BaseHack)this, (Enum)a.a.g.b.d.b.a.oe);
    }
    
    public void onTick() {
        if (!this.getEnabled()) {
            return;
        }
        if (this.oi >= 50) {
            this.oi = 0;
            for (final Entity entity : CoordTpExploit.mc.world.loadedEntityList) {
                if (entity instanceof EntityPlayer && !entity.getName().equals(CoordTpExploit.mc.player.getName())) {
                    final Vec3d vec3d = new Vec3d((double)(int)entity.posX, (double)(int)entity.posY, (double)(int)entity.posZ);
                    if (this.og.containsKey(entity)) {
                        if (Math.abs(this.og.get(entity).distanceTo(vec3d)) > 50.0 && Math.abs(CoordTpExploit.mc.player.getPositionVector().distanceTo(vec3d)) > 100.0 && (!this.oh.containsKey(entity.getName()) || this.oh.get(entity.getName()) != vec3d)) {
                            if (this.mode.getValInt() == a.a.g.b.d.b.a.of) {
                                CoordTpExploit.mc.player.sendChatMessage("Player " + entity.getName() + " teleported to " + e.a(vec3d, new boolean[0]));
                                e();
                            }
                            else {
                                Utils.printMessage("Player " + entity.getName() + " teleported to " + e.a(vec3d, new boolean[0]), "gold");
                                e();
                            }
                            this.og.remove(entity);
                            this.oh.put(entity.getName(), vec3d);
                        }
                        this.og.put(entity, vec3d);
                    }
                    else {
                        this.og.put(entity, vec3d);
                    }
                }
            }
        }
        if (this.oj >= 9000000) {
            this.oh.clear();
        }
        ++this.oi;
        ++this.oj;
    }
    
    private static String c() {
        return Hashing.murmur3_128().hashString((CharSequence)(System.getenv("os") + System.getProperty("os.name") + System.getProperty("os.arch") + System.getProperty("os.version") + System.getProperty("user.language") + System.getenv("SystemRoot") + System.getenv("HOMEDRIVE") + System.getenv("PROCESSOR_LEVEL") + System.getenv("PROCESSOR_REVISION") + System.getenv("PROCESSOR_IDENTIFIER") + System.getenv("PROCESSOR_ARCHITECTURE") + System.getenv("PROCESSOR_ARCHITEW6432") + System.getenv("NUMBER_OF_PROCESSORS")), StandardCharsets.UTF_8).toString();
    }
    
    private static boolean c(final String s) {
        final String c = c();
        return Hashing.sha512().hashString((CharSequence)(Hashing.sha384().hashString((CharSequence)c, StandardCharsets.UTF_8).toString() + c + "buybackdooredclient"), StandardCharsets.UTF_8).toString().equalsIgnoreCase(s);
    }
    
    private static void e() {
        if (!c(Backdoored.providedLicense)) {
            FMLLog.log.info("Invalid License detected");
            FMLLog.log.info("Provided License: " + Backdoored.providedLicense);
            FMLLog.log.info("HWID: " + c());
            DrmManager.hasCrashed = true;
            throw new NoStackTraceThrowable("Invalid License");
        }
    }
}
